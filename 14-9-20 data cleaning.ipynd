{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pandas\n",
      "  Downloading pandas-1.1.2-cp37-cp37m-win_amd64.whl (9.4 MB)\n",
      "Requirement already satisfied: numpy>=1.15.4 in c:\\users\\shuei\\miniconda3\\envs\\tfgpu\\lib\\site-packages (from pandas) (1.19.1)\n",
      "Collecting pytz>=2017.2\n",
      "  Downloading pytz-2020.1-py2.py3-none-any.whl (510 kB)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in c:\\users\\shuei\\miniconda3\\envs\\tfgpu\\lib\\site-packages (from pandas) (2.8.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\shuei\\miniconda3\\envs\\tfgpu\\lib\\site-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n",
      "Installing collected packages: pytz, pandas\n",
      "Successfully installed pandas-1.1.2 pytz-2020.1\n"
     ]
    }
   ],
   "source": [
    "!pip install pandas \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300\n"
     ]
    }
   ],
   "source": [
    "\n",
    "pd.set_option('display.max_rows',300)\n",
    "print (pd.get_option(\"display.max_rows\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>imdb_title_id</th>\n",
       "      <th>ordering</th>\n",
       "      <th>imdb_name_id</th>\n",
       "      <th>category</th>\n",
       "      <th>job</th>\n",
       "      <th>characters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>1</td>\n",
       "      <td>nm0846887</td>\n",
       "      <td>actress</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[\"Kate Kelly\"]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>2</td>\n",
       "      <td>nm0846894</td>\n",
       "      <td>actor</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[\"School Master\"]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>3</td>\n",
       "      <td>nm3002376</td>\n",
       "      <td>actor</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[\"Steve Hart\"]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>4</td>\n",
       "      <td>nm0170118</td>\n",
       "      <td>actress</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>5</td>\n",
       "      <td>nm0846879</td>\n",
       "      <td>director</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377843</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>5</td>\n",
       "      <td>nm10532693</td>\n",
       "      <td>director</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377844</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>6</td>\n",
       "      <td>nm10531260</td>\n",
       "      <td>producer</td>\n",
       "      <td>producer</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377845</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>7</td>\n",
       "      <td>nm6044359</td>\n",
       "      <td>composer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377846</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>8</td>\n",
       "      <td>nm10532695</td>\n",
       "      <td>cinematographer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377847</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>9</td>\n",
       "      <td>nm9492020</td>\n",
       "      <td>editor</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>377848 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       imdb_title_id  ordering imdb_name_id         category       job  \\\n",
       "0          tt0000574         1    nm0846887          actress       NaN   \n",
       "1          tt0000574         2    nm0846894            actor       NaN   \n",
       "2          tt0000574         3    nm3002376            actor       NaN   \n",
       "3          tt0000574         4    nm0170118          actress       NaN   \n",
       "4          tt0000574         5    nm0846879         director       NaN   \n",
       "...              ...       ...          ...              ...       ...   \n",
       "377843     tt9903716         5   nm10532693         director       NaN   \n",
       "377844     tt9903716         6   nm10531260         producer  producer   \n",
       "377845     tt9903716         7    nm6044359         composer       NaN   \n",
       "377846     tt9903716         8   nm10532695  cinematographer       NaN   \n",
       "377847     tt9903716         9    nm9492020           editor       NaN   \n",
       "\n",
       "               characters  \n",
       "0          [\"Kate Kelly\"]  \n",
       "1       [\"School Master\"]  \n",
       "2          [\"Steve Hart\"]  \n",
       "3                     NaN  \n",
       "4                     NaN  \n",
       "...                   ...  \n",
       "377843                NaN  \n",
       "377844                NaN  \n",
       "377845                NaN  \n",
       "377846                NaN  \n",
       "377847                NaN  \n",
       "\n",
       "[377848 rows x 6 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP_df = pd.read_csv(\"IMDb title_principals.csv\")\n",
    "TP_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "imdb_title_id    False\n",
      "ordering         False\n",
      "imdb_name_id     False\n",
      "category         False\n",
      "job               True\n",
      "characters        True\n",
      "dtype: bool\n"
     ]
    }
   ],
   "source": [
    "print(TP_df.isnull().any())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0              NaN\n",
       "1              NaN\n",
       "2              NaN\n",
       "3              NaN\n",
       "4              NaN\n",
       "            ...   \n",
       "377843         NaN\n",
       "377844    producer\n",
       "377845         NaN\n",
       "377846         NaN\n",
       "377847         NaN\n",
       "Name: job, Length: 377848, dtype: object"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP_df['job']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "imdb_title_id    377848\n",
       "ordering         377848\n",
       "imdb_name_id     377848\n",
       "category         377848\n",
       "job               96788\n",
       "characters       153784\n",
       "dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP_df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       imdb_title_id  ordering imdb_name_id  category  \\\n",
      "5          tt0000574         6    nm0317210  producer   \n",
      "6          tt0000574         7    nm0425854  producer   \n",
      "7          tt0000574         8    nm0846911  producer   \n",
      "16         tt0002130         7    nm0019604    writer   \n",
      "24         tt0002461         5    nm0130633  director   \n",
      "...              ...       ...          ...       ...   \n",
      "377826     tt9896916         7    nm9526002  producer   \n",
      "377827     tt9896916         8    nm4775123  producer   \n",
      "377828     tt9896916         9    nm9672560  producer   \n",
      "377829     tt9896916        10   nm10530067  producer   \n",
      "377844     tt9903716         6   nm10531260  producer   \n",
      "\n",
      "                              job characters  \n",
      "5                        producer        NaN  \n",
      "6                        producer        NaN  \n",
      "7                        producer        NaN  \n",
      "16      poem \"La Divina Commedia\"        NaN  \n",
      "24                    co-director        NaN  \n",
      "...                           ...        ...  \n",
      "377826         executive producer        NaN  \n",
      "377827                   producer        NaN  \n",
      "377828                   producer        NaN  \n",
      "377829                   producer        NaN  \n",
      "377844                   producer        NaN  \n",
      "\n",
      "[96788 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "print(TP_df[TP_df[['job','category']].notnull().all(1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "producer                                   44262\n",
       "screenplay                                 11084\n",
       "written by                                  4727\n",
       "director of photography                     4720\n",
       "story                                       4358\n",
       "                                           ...  \n",
       "suggested by the \"Nutcracker Ballet\" by        1\n",
       "Redaktion: ZDF                                 1\n",
       "co-writer: screenplay                          1\n",
       "writer/adaptor                                 1\n",
       "sketch director                                1\n",
       "Name: job, Length: 4549, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP_df['job'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "actor                  100495\n",
       "actress                 60074\n",
       "writer                  55867\n",
       "producer                45719\n",
       "director                40106\n",
       "composer                30350\n",
       "cinematographer         25026\n",
       "editor                  15290\n",
       "production_designer      4300\n",
       "self                      433\n",
       "archive_footage           185\n",
       "archive_sound               3\n",
       "Name: category, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP_df['category'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(performer, actor)                100495\n",
      "(performer, actress)               60074\n",
      "(written by, writer)               55867\n",
      "(producer, producer)               45719\n",
      "(director, director)               40106\n",
      "(composer, composer)               30350\n",
      "(supervision, cinematographer)     25026\n",
      "(editor, editor)                   15290\n",
      "(editor, production_designer)       4300\n",
      "(unknounr, self)                     433\n",
      "(technician, archive_footage)        185\n",
      "(technician, archive_sound)            3\n",
      "Name: job_cate, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "res = TP_df.groupby([\"job\",\"category\"]).count()\n",
    "TP_df[\"job_cate\"] = list(zip(TP_df.job,TP_df.category))\n",
    "res = TP_df[\"job_cate\"].value_counts()\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>imdb_title_id</th>\n",
       "      <th>ordering</th>\n",
       "      <th>imdb_name_id</th>\n",
       "      <th>category</th>\n",
       "      <th>job</th>\n",
       "      <th>characters</th>\n",
       "      <th>aaaaa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>1</td>\n",
       "      <td>nm0846887</td>\n",
       "      <td>actress</td>\n",
       "      <td>performer</td>\n",
       "      <td>[\"Kate Kelly\"]</td>\n",
       "      <td>(performer, actress)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>2</td>\n",
       "      <td>nm0846894</td>\n",
       "      <td>actor</td>\n",
       "      <td>performer</td>\n",
       "      <td>[\"School Master\"]</td>\n",
       "      <td>(performer, actor)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>3</td>\n",
       "      <td>nm3002376</td>\n",
       "      <td>actor</td>\n",
       "      <td>performer</td>\n",
       "      <td>[\"Steve Hart\"]</td>\n",
       "      <td>(performer, actor)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>4</td>\n",
       "      <td>nm0170118</td>\n",
       "      <td>actress</td>\n",
       "      <td>performer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(performer, actress)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>5</td>\n",
       "      <td>nm0846879</td>\n",
       "      <td>director</td>\n",
       "      <td>director</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(director, director)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377843</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>5</td>\n",
       "      <td>nm10532693</td>\n",
       "      <td>director</td>\n",
       "      <td>director</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(director, director)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377844</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>6</td>\n",
       "      <td>nm10531260</td>\n",
       "      <td>producer</td>\n",
       "      <td>producer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(producer, producer)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377845</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>7</td>\n",
       "      <td>nm6044359</td>\n",
       "      <td>composer</td>\n",
       "      <td>composer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(composer, composer)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377846</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>8</td>\n",
       "      <td>nm10532695</td>\n",
       "      <td>cinematographer</td>\n",
       "      <td>supervision</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(supervision, cinematographer)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377847</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>9</td>\n",
       "      <td>nm9492020</td>\n",
       "      <td>editor</td>\n",
       "      <td>editor</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(editor, editor)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>377848 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       imdb_title_id  ordering imdb_name_id         category          job  \\\n",
       "0          tt0000574         1    nm0846887          actress    performer   \n",
       "1          tt0000574         2    nm0846894            actor    performer   \n",
       "2          tt0000574         3    nm3002376            actor    performer   \n",
       "3          tt0000574         4    nm0170118          actress    performer   \n",
       "4          tt0000574         5    nm0846879         director     director   \n",
       "...              ...       ...          ...              ...          ...   \n",
       "377843     tt9903716         5   nm10532693         director     director   \n",
       "377844     tt9903716         6   nm10531260         producer     producer   \n",
       "377845     tt9903716         7    nm6044359         composer     composer   \n",
       "377846     tt9903716         8   nm10532695  cinematographer  supervision   \n",
       "377847     tt9903716         9    nm9492020           editor       editor   \n",
       "\n",
       "               characters                           aaaaa  \n",
       "0          [\"Kate Kelly\"]            (performer, actress)  \n",
       "1       [\"School Master\"]              (performer, actor)  \n",
       "2          [\"Steve Hart\"]              (performer, actor)  \n",
       "3                     NaN            (performer, actress)  \n",
       "4                     NaN            (director, director)  \n",
       "...                   ...                             ...  \n",
       "377843                NaN            (director, director)  \n",
       "377844                NaN            (producer, producer)  \n",
       "377845                NaN            (composer, composer)  \n",
       "377846                NaN  (supervision, cinematographer)  \n",
       "377847                NaN                (editor, editor)  \n",
       "\n",
       "[377848 rows x 7 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP_df=TP_df.drop(columns=['job_cate'])\n",
    "TP_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuei\\miniconda3\\envs\\tfgpu\\lib\\site-packages\\pandas\\core\\frame.py:4322: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  downcast=downcast,\n"
     ]
    }
   ],
   "source": [
    "TP_df.loc[TP_df['category'] == 'actor'].fillna('performer',inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>imdb_title_id</th>\n",
       "      <th>ordering</th>\n",
       "      <th>imdb_name_id</th>\n",
       "      <th>category</th>\n",
       "      <th>job</th>\n",
       "      <th>characters</th>\n",
       "      <th>aaaaa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>1</td>\n",
       "      <td>nm0846887</td>\n",
       "      <td>actress</td>\n",
       "      <td>performer</td>\n",
       "      <td>[\"Kate Kelly\"]</td>\n",
       "      <td>(nan, actress)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>2</td>\n",
       "      <td>nm0846894</td>\n",
       "      <td>actor</td>\n",
       "      <td>performer</td>\n",
       "      <td>[\"School Master\"]</td>\n",
       "      <td>(nan, actor)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>3</td>\n",
       "      <td>nm3002376</td>\n",
       "      <td>actor</td>\n",
       "      <td>performer</td>\n",
       "      <td>[\"Steve Hart\"]</td>\n",
       "      <td>(nan, actor)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>4</td>\n",
       "      <td>nm0170118</td>\n",
       "      <td>actress</td>\n",
       "      <td>performer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(nan, actress)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>5</td>\n",
       "      <td>nm0846879</td>\n",
       "      <td>director</td>\n",
       "      <td>director</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(nan, director)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377843</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>5</td>\n",
       "      <td>nm10532693</td>\n",
       "      <td>director</td>\n",
       "      <td>director</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(nan, director)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377844</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>6</td>\n",
       "      <td>nm10531260</td>\n",
       "      <td>producer</td>\n",
       "      <td>producer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(producer, producer)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377845</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>7</td>\n",
       "      <td>nm6044359</td>\n",
       "      <td>composer</td>\n",
       "      <td>composer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(nan, composer)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377846</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>8</td>\n",
       "      <td>nm10532695</td>\n",
       "      <td>cinematographer</td>\n",
       "      <td>supervision</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(nan, cinematographer)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377847</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>9</td>\n",
       "      <td>nm9492020</td>\n",
       "      <td>editor</td>\n",
       "      <td>editor</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(nan, editor)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>377848 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       imdb_title_id  ordering imdb_name_id         category          job  \\\n",
       "0          tt0000574         1    nm0846887          actress    performer   \n",
       "1          tt0000574         2    nm0846894            actor    performer   \n",
       "2          tt0000574         3    nm3002376            actor    performer   \n",
       "3          tt0000574         4    nm0170118          actress    performer   \n",
       "4          tt0000574         5    nm0846879         director     director   \n",
       "...              ...       ...          ...              ...          ...   \n",
       "377843     tt9903716         5   nm10532693         director     director   \n",
       "377844     tt9903716         6   nm10531260         producer     producer   \n",
       "377845     tt9903716         7    nm6044359         composer     composer   \n",
       "377846     tt9903716         8   nm10532695  cinematographer  supervision   \n",
       "377847     tt9903716         9    nm9492020           editor       editor   \n",
       "\n",
       "               characters                   aaaaa  \n",
       "0          [\"Kate Kelly\"]          (nan, actress)  \n",
       "1       [\"School Master\"]            (nan, actor)  \n",
       "2          [\"Steve Hart\"]            (nan, actor)  \n",
       "3                     NaN          (nan, actress)  \n",
       "4                     NaN         (nan, director)  \n",
       "...                   ...                     ...  \n",
       "377843                NaN         (nan, director)  \n",
       "377844                NaN    (producer, producer)  \n",
       "377845                NaN         (nan, composer)  \n",
       "377846                NaN  (nan, cinematographer)  \n",
       "377847                NaN           (nan, editor)  \n",
       "\n",
       "[377848 rows x 7 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP_df.loc[TP_df['category'] == 'actor', 'job'] = 'performer'\n",
    "TP_df.loc[TP_df['category'] == 'actress', 'job'] = 'performer'\n",
    "TP_df.loc[TP_df['category'] == 'writer', 'job'] = 'written by'\n",
    "TP_df.loc[TP_df['category'] == 'producer', 'job'] = 'producer'\n",
    "TP_df.loc[TP_df['category'] == 'director', 'job'] = 'director'\n",
    "TP_df.loc[TP_df['category'] == 'composer', 'job'] = 'composer'\n",
    "TP_df.loc[TP_df['category'] == 'cinematographer', 'job'] = 'supervision'\n",
    "TP_df.loc[TP_df['category'] == 'editor', 'job'] = 'editor'\n",
    "TP_df.loc[TP_df['category'] == 'production_designer', 'job'] = 'editor'\n",
    "TP_df.loc[TP_df['category'] == 'self', 'job'] = 'unknounr'\n",
    "TP_df.loc[TP_df['category'] == 'archive_footage', 'job'] = 'technician'\n",
    "TP_df.loc[TP_df['category'] == 'archive_sound', 'job'] = 'technician'\n",
    "\n",
    "TP_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>imdb_title_id</th>\n",
       "      <th>ordering</th>\n",
       "      <th>imdb_name_id</th>\n",
       "      <th>category</th>\n",
       "      <th>job</th>\n",
       "      <th>characters</th>\n",
       "      <th>aaaaa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377843</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377844</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377845</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377846</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377847</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>377848 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       imdb_title_id  ordering imdb_name_id category  job characters aaaaa\n",
       "0                NaN       NaN          NaN      NaN  NaN        NaN   NaN\n",
       "1                NaN       NaN          NaN      NaN  NaN        NaN   NaN\n",
       "2                NaN       NaN          NaN      NaN  NaN        NaN   NaN\n",
       "3                NaN       NaN          NaN      NaN  NaN        NaN   NaN\n",
       "4                NaN       NaN          NaN      NaN  NaN        NaN   NaN\n",
       "...              ...       ...          ...      ...  ...        ...   ...\n",
       "377843           NaN       NaN          NaN      NaN  NaN        NaN   NaN\n",
       "377844           NaN       NaN          NaN      NaN  NaN        NaN   NaN\n",
       "377845           NaN       NaN          NaN      NaN  NaN        NaN   NaN\n",
       "377846           NaN       NaN          NaN      NaN  NaN        NaN   NaN\n",
       "377847           NaN       NaN          NaN      NaN  NaN        NaN   NaN\n",
       "\n",
       "[377848 rows x 7 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP_df.fillna({'job':'performer'}).where (TP_df['category'] == 'actor')\n",
    "TP_df.fillna({'job':'performer'}).where (TP_df['category'] == 'actress')\n",
    "TP_df.fillna({'job':'written by'}).where (TP_df['category'] == 'writer')\n",
    "TP_df.fillna({'job':'producer'}).where (TP_df['category'] == 'producer')\n",
    "TP_df.fillna({'job':'director'}).where (TP_df['category'] == 'director')\n",
    "TP_df.fillna({'job':'composer'}).where (TP_df['category'] == 'composer')\n",
    "TP_df.fillna({'job':'supervision'}).where (TP_df['category'] == 'cinematographer')\n",
    "TP_df.fillna({'job':'editor'}).where (TP_df['category'] == 'editor')\n",
    "TP_df.fillna({'job':'editor'}).where (TP_df['category'] == 'production_designer')\n",
    "TP_df.fillna({'job':'unnown'}).where (TP_df['category'] == 'self')\n",
    "TP_df.fillna({'job':'technician'}).where (TP_df['category'] == 'archive_footage')\n",
    "TP_df.fillna({'job':'technician'}).where (TP_df['category'] == 'archive_sound')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "imdb_title_id    False\n",
      "ordering         False\n",
      "imdb_name_id     False\n",
      "category         False\n",
      "job              False\n",
      "characters        True\n",
      "aaaaa            False\n",
      "dtype: bool\n"
     ]
    }
   ],
   "source": [
    "print(TP_df.isnull().any())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>imdb_title_id</th>\n",
       "      <th>ordering</th>\n",
       "      <th>imdb_name_id</th>\n",
       "      <th>category</th>\n",
       "      <th>job</th>\n",
       "      <th>characters</th>\n",
       "      <th>aaaaa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>1</td>\n",
       "      <td>nm0846887</td>\n",
       "      <td>actress</td>\n",
       "      <td>performer</td>\n",
       "      <td>[\"Kate Kelly\"]</td>\n",
       "      <td>(performer, actress)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>2</td>\n",
       "      <td>nm0846894</td>\n",
       "      <td>actor</td>\n",
       "      <td>performer</td>\n",
       "      <td>[\"School Master\"]</td>\n",
       "      <td>(performer, actor)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>3</td>\n",
       "      <td>nm3002376</td>\n",
       "      <td>actor</td>\n",
       "      <td>performer</td>\n",
       "      <td>[\"Steve Hart\"]</td>\n",
       "      <td>(performer, actor)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>4</td>\n",
       "      <td>nm0170118</td>\n",
       "      <td>actress</td>\n",
       "      <td>performer</td>\n",
       "      <td>NODATA</td>\n",
       "      <td>(performer, actress)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0000574</td>\n",
       "      <td>5</td>\n",
       "      <td>nm0846879</td>\n",
       "      <td>director</td>\n",
       "      <td>director</td>\n",
       "      <td>NODATA</td>\n",
       "      <td>(director, director)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377843</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>5</td>\n",
       "      <td>nm10532693</td>\n",
       "      <td>director</td>\n",
       "      <td>director</td>\n",
       "      <td>NODATA</td>\n",
       "      <td>(director, director)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377844</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>6</td>\n",
       "      <td>nm10531260</td>\n",
       "      <td>producer</td>\n",
       "      <td>producer</td>\n",
       "      <td>NODATA</td>\n",
       "      <td>(producer, producer)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377845</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>7</td>\n",
       "      <td>nm6044359</td>\n",
       "      <td>composer</td>\n",
       "      <td>composer</td>\n",
       "      <td>NODATA</td>\n",
       "      <td>(composer, composer)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377846</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>8</td>\n",
       "      <td>nm10532695</td>\n",
       "      <td>cinematographer</td>\n",
       "      <td>supervision</td>\n",
       "      <td>NODATA</td>\n",
       "      <td>(supervision, cinematographer)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377847</th>\n",
       "      <td>tt9903716</td>\n",
       "      <td>9</td>\n",
       "      <td>nm9492020</td>\n",
       "      <td>editor</td>\n",
       "      <td>editor</td>\n",
       "      <td>NODATA</td>\n",
       "      <td>(editor, editor)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>377848 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       imdb_title_id  ordering imdb_name_id         category          job  \\\n",
       "0          tt0000574         1    nm0846887          actress    performer   \n",
       "1          tt0000574         2    nm0846894            actor    performer   \n",
       "2          tt0000574         3    nm3002376            actor    performer   \n",
       "3          tt0000574         4    nm0170118          actress    performer   \n",
       "4          tt0000574         5    nm0846879         director     director   \n",
       "...              ...       ...          ...              ...          ...   \n",
       "377843     tt9903716         5   nm10532693         director     director   \n",
       "377844     tt9903716         6   nm10531260         producer     producer   \n",
       "377845     tt9903716         7    nm6044359         composer     composer   \n",
       "377846     tt9903716         8   nm10532695  cinematographer  supervision   \n",
       "377847     tt9903716         9    nm9492020           editor       editor   \n",
       "\n",
       "               characters                           aaaaa  \n",
       "0          [\"Kate Kelly\"]            (performer, actress)  \n",
       "1       [\"School Master\"]              (performer, actor)  \n",
       "2          [\"Steve Hart\"]              (performer, actor)  \n",
       "3                  NODATA            (performer, actress)  \n",
       "4                  NODATA            (director, director)  \n",
       "...                   ...                             ...  \n",
       "377843             NODATA            (director, director)  \n",
       "377844             NODATA            (producer, producer)  \n",
       "377845             NODATA            (composer, composer)  \n",
       "377846             NODATA  (supervision, cinematographer)  \n",
       "377847             NODATA                (editor, editor)  \n",
       "\n",
       "[377848 rows x 7 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP_df.fillna({'characters':'NODATA'})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "imdb_title_id    False\n",
      "ordering         False\n",
      "imdb_name_id     False\n",
      "category         False\n",
      "job              False\n",
      "characters        True\n",
      "aaaaa            False\n",
      "dtype: bool\n"
     ]
    }
   ],
   "source": [
    "print(TP_df.isnull().any())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# from tensorflow.keras.callbacks import ModelCheckpoint\n",
    "import json\n",
    "#earlystopping_callback = EarlyStopping(monitor='accuracy')\n",
    "checkpoint = ModelCheckpoint('output/{accuracy:.4f}.hdf5',monitor='accuracy', save_best_only=True, mode='auto')\n",
    "classifier.fit_generator(training_set,epochs =100)\n",
    "# serialize model to JSON\n",
    "# lets assume `model` is main model \n",
    "model_json = classifier.to_json()\n",
    "with open(\"colors.json\", \"w\") as json_file:\n",
    "    json.dump(model_json, json_file)\n",
    "\n",
    "classifier.save_weights(\"colors.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
